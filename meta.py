import subprocess, os, sys
from datetime import datetime


config = {'manual': False,'info_level': 0, 'restricted_extensions': [], 'ignore_files': ["meta.xml", "meta-generated.xml"], 'author': "Default", 'cache': False, 'override': True, 'generated_exported': True}
type_cases = {'client':["client"], 'server':["server"]}
prefix_cases = {'client':["c_"], 'server':["s_"]}


def get_type(file_path, name):
    if config['manual']:
        input_type = input("USER-INPUT: Choose type for " + file_path + os.sep + name)
        for type in type_cases:
            if input_type.find(type) >= 0:
                return type
    else:
        name = name.lower()
        for type in type_cases:
            for base_case in type_cases[type]: #check is file name contains cases listed in dictionary above
                if name.find(base_case) >= 0:
                    return type
            for base_case in prefix_cases[type]:
                if name.startswith(base_case):
                    return type

        folders = [folder.lower() for folder in file_path.split("\\")]
        for folder in folders:
            for type in type_cases:
                if folder.find(type) >= 0: #same check, but for folders
                    return type
            for base_case in prefix_cases[type]:
                if name.startswith(base_case):
                    return type

    if config['info_level'] < 3:
        print("WARNING: Can't determine file type!")
    return "shared"

exported_functions = list()
def obtain_exported_functions(file, type):
    with open(file) as f:
        lines = f.read().splitlines()
        for line in lines:
            if "function " in line and "--exported" in line:
                function_name = line.replace("function ", "").split("(")[0]
                exported_functions.append("\t<export function=\"" + function_name + "\" type=\"" + type + "\" />\n")


if len(sys.argv) > 1 and os.path.isdir(sys.argv[1]):
    working_folder = sys.argv[1]
    if working_folder == ".":
        working_folder = os.path.dirname(os.path.realpath(__file__))
    
    os.chdir(working_folder)
    with open("meta-generated.xml", "w+") as meta_file:
        meta_file.truncate(0) 
        meta_file.write("<meta>" + "\n")

        name = os.path.basename(working_folder)
        meta_file.write("\t" + "<info name=\"" + name +"\" description=\"Generated by MTA-Resource-Tool\" author=\"" + config['author'] + "\"/>" + "\n")
        
        for root, dirs, files in os.walk(working_folder):
            files[:] = [f for f in files if (not f in config['ignore_files']) and not f.startswith(".")]
            folders = root.split("\\")
            if not folders[-1].startswith('.'): #ignoring .git and etc. basically
                meta_file.write("\n")

                for file in files:
                    file_path = os.path.join(root, file)
                    file_path = file_path.replace(working_folder + os.sep, "")

                    name, ext = os.path.splitext(file)
                    if ext == ".lua" or ext == ".luac":
                        type = get_type(file_path, name)
                        if config['info_level'] == 0:
                            print("INFO:", file_path, "will be written as", type, "file")

                        if type == "client" and config['cache'] == False:
                            post_addition = 'cache = "false"' 
                        else:
                            post_addition = ""
                        obtain_exported_functions(file_path, type)
                        meta_row = "\t" + "<script src=\"" + file_path + "\" type=\"" + type + "\" " + post_addition +"/>" + "\n"
                        meta_file.write(meta_row)


                    elif not ext in config['restricted_extensions']:
                        if config['info_level'] == 0:
                            print("INFO:", file_path, "will be written")

                        meta_row = "\t" + "<file src=\"" + file_path + "\"/>" + "\n"
                        meta_file.write(meta_row)
                    else:
                        if config['info_level'] == 0:
                            print("INFO:", file_path, "has restricted extensions")

        for line in exported_functions:
            meta_file.write(line)

        meta_file.write("</meta>")

    if os.path.isfile("meta.xml"):
        if config['override']:
            toOverwite = input("USER-INPUT: Should the meta.xml be overwritten by newly generated?")
            if "y" in toOverwite:
                if config['info_level'] < 3:
                    print("WARNING: meta.xml will be overwritten!")
                os.rename("meta.xml", ".meta-old xml " + str(datetime.now().time()).replace(":", ".", -1))
                os.rename("meta-generated.xml", "meta.xml")
            else:
                if config['info_level'] < 3:
                    print("WARNING: meta.xml won't be overwritten!")
    else:
        os.rename("meta-generated.xml", "meta.xml")
else:
    sys.exit("ERROR: No file or directory specified!")